name: Deploy Spring Backend

on:
  push:
    branches:
      - dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Spring Code
        uses: actions/checkout@v3

      - name: 🔐 application.properties 생성
        working-directory: ./ssupetition
        run: |
          mkdir -p src/main/resources
          echo "spring.datasource.url=${{ secrets.DB_URL }}" >> src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
          echo "spring.mail.host=smtp.naver.com" >> src/main/resources/application.properties
          echo "spring.mail.port=587" >> src/main/resources/application.properties
          echo "spring.mail.username=${{ secrets.MAIL_USERNAME }}" >> src/main/resources/application.properties
          echo "spring.mail.password=${{ secrets.MAIL_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.auth=true" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.starttls.enable=true" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.starttls.required=true" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.ssl.trust=smtp.naver.com" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.connectiontimeout=5000" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.timeout=5000" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.writetimeout=5000" >> src/main/resources/application.properties
          echo "spring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2" >> src/main/resources/application.properties
          echo "cloud.aws.s3.bucket=${{ secrets.S3_BUCKET_NAME }}" >> src/main/resources/application.properties
          echo "cloud.aws.region.static=${{ secrets.S3_BUCKET_REGION }}" >> src/main/resources/application.properties
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> src/main/resources/application.properties
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> src/main/resources/application.properties
          echo "openai.api.key=${{ secrets.OPEN_API_KEY }}" >> src/main/resources/application.properties
          echo "openai.embedding.model=${{ secrets.OPEN_MODEL }}" >> src/main/resources/application.properties
          echo "app.domain=${{ secrets.APP_DOMAIN }}" >> src/main/resources/application.properties
          echo "app.qdrant.collection=posts" >> src/main/resources/application.properties
          echo "mail.to=${{ secrets.MAIL_TO }}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-file-size=200MB" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-request-size=200MB" >> src/main/resources/application.properties

      - name: ☕ Gradle Build (jar 생성)
        run: ./gradlew build -x test
        working-directory: ./ssupetition

      - name: 🐳 Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Build & Push Docker image (safe version, no cache)
        uses: docker/build-push-action@v5
        with:
          context: ./ssupetition
          file: ./ssupetition/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/soongmin:latest


      - name: 🚀 EC2에 SSH 접속 후 backend 재배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/my-app
            docker compose pull backend
            docker compose up -d backend
